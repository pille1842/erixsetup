#!/bin/bash
# Erix Setup Version 0.1.0 -- Setup-Routine für Ubuntu 20.04 LTS
# Copyright (C) 2020 Eric Haberstroh <gpg@erixpage.de>

# Dieses Programm ist Freie Software: Sie können es unter den Bedingungen
# der GNU General Public License, wie von der Free Software Foundation,
# Version 3 der Lizenz oder (nach Ihrer Wahl) jeder neueren
# veröffentlichten Version, weiter verteilen und/oder modifizieren.

# Dieses Programm wird in der Hoffnung bereitgestellt, dass es nützlich sein wird, jedoch
# OHNE JEDE GEWÄHR; sogar ohne die implizite
# Gewähr der MARKTFÄHIGKEIT oder EIGNUNG FÜR EINEN BESTIMMTEN ZWECK.
# Siehe die GNU General Public License für weitere Einzelheiten.

# Sie sollten eine Kopie der GNU General Public License zusammen mit diesem
# Programm erhalten haben. Wenn nicht, siehe <https://www.gnu.org/licenses/>.

source $(dirname $0)/common.sh

## Begrüßungsnachricht
echo "Erix Setup Version $VERSION -- Setup-Routine für Ubuntu 20.04 LTS"
echo ""
echo "Copyright (C) 2020 Eric Haberstroh <gpg@erixpage.de>"
echo ""
echo "Dieses Programm ist Freie Software: Sie können es unter den Bedingungen"
echo "der GNU General Public License, wie von der Free Software Foundation,"
echo "Version 3 der Lizenz oder (nach Ihrer Wahl) jeder neueren"
echo "veröffentlichten Version, weiter verteilen und/oder modifizieren."
echo ""
echo "Dieses Programm wird in der Hoffnung bereitgestellt, dass es nützlich sein wird, jedoch"
echo "OHNE JEDE GEWÄHR; sogar ohne die implizite"
echo "Gewähr der MARKTFÄHIGKEIT oder EIGNUNG FÜR EINEN BESTIMMTEN ZWECK."
echo "Siehe die GNU General Public License für weitere Einzelheiten."
echo ""
echo "Sie sollten eine Kopie der GNU General Public License zusammen mit diesem"
echo "Programm erhalten haben. Wenn nicht, siehe <https://www.gnu.org/licenses/>."
echo ""

## Einstellungen laden
test -r settings || fatal "Die Einstellungen aus der Datei settings können nicht geladen werden."
source settings

## Prüfen, ob alle notwendigen Variablen gesetzt sind
vars="DESIRED_APT DESIRED_SNAP DESIRED_DIRS WORKGROUP"

for var in $vars; do
    test -n "${!var}" || fatal "Die Variable $var wird in settings nicht definiert, wird aber zwingend benötigt."
done

## Installation gewünschter APT-Pakete
notice "Die folgenden Pakete werden nun mittels APT installiert:"
echo $DESIRED_APT
echo ""
cont_skip_abort
if [[ $? -eq 0 ]]; then
    sudo apt install $DESIRED_APT
fi

## Installation gewünschter Snaps
notice "Die folgenden Programme werden nun als Snap installiert:"
echo $DESIRED_SNAP
echo ""
cont_skip_abort
if [[ $? -eq 0 ]]; then
    for snap in $DESIRED_SNAP; do
        sudo snap install $snap
        if [[ $? -ne 0 ]]; then
            warn "Die Installation scheint fehlgeschlagen zu sein. Versuch mit Option --classic wird unternommen."
            sudo snap install --classic $snap
        fi
    done
fi

## Google Chrome herunterladen und installieren
notice "Google Chrome wird als Debian-Paket heruntergeladen und installiert."
cont_skip_abort
if [[ $? -eq 0 ]]; then
    pushd /tmp
    wget "https://dl.google.com/linux/direct/google-chrome-stable_current_amd64.deb"
    sudo dpkg -i google-chrome-stable_current_amd64.deb
    rm google-chrome-stable_current_amd64.deb
    popd
fi

## NUR AENEAS: Mountpoints anlegen
if [[ "$(hostname)" = "aeneas" ]]; then
    notice "(aeneas): Die Mountpoints /EXTERN, /EXTWIN und /WINDOWS werden angelegt:"
    notice "/EXTERN  = ext4-Partition auf der externen Festplatte"
    notice "/EXTWIN  = NTFS-Partition auf der externen Festplatte"
    notice "/WINDOWS = NTFS-Partition auf der internen Festplatte"
    notice "/etc/fstab wird konfiguriert, diese Partitionen beim Systemstart einzuhängen, und sie werden sofort gemountet."
    cont_skip_abort
    if [[ $? -eq 0 ]]; then
        sudo mkdir /EXTERN /EXTWIN /WINDOWS
        echo '/dev/disk/by-id/usb-WD_Elements_10A8_575841314136343359483933-0:0-part1 /EXTERN auto nosuid,nodev,nofail,x-gvfs-show 0 0' | sudo tee -a /etc/fstab
        echo '/dev/disk/by-id/usb-WD_Elements_10A8_575841314136343359483933-0:0-part2 /EXTWIN auto nosuid,nodev,nofail,x-gvfs-show 0 0' | sudo tee -a /etc/fstab
        echo '/dev/disk/by-uuid/BAA0E7E2A0E7A35D /WINDOWS auto nosuid,nodev,nofail,x-gvfs-show 0 0' | sudo tee -a /etc/fstab
        sudo mount /EXTERN
        sudo mount /EXTWIN
        sudo mount /WINDOWS
    fi
fi

## LAMP-Setup
if [[ -e /usr/bin/mysql_secure_installation ]]; then
    notice "Es wird nun mysql_secure_installation ausgeführt, um MariaDB zu konfigurieren."
    cont_skip_abort
    if [[ $? -eq 0 ]]; then
        sudo mysql_secure_installation
    fi

    notice "Composer wird installiert und ein Self-Update durchgeführt."
    cont_skip_abort
    if [[ $? -eq 0 ]]; then
        pushd /tmp
        php -r "copy('https://getcomposer.org/installer', 'composer-setup.php');"
        php -r "if (hash_file('sha384', 'composer-setup.php') === 'e0012edf3e80b6978849f5eff0d4b4e4c79ff1609dd1e613307e16318854d24ae64f26d17af3ef0bf7cfb710ca74755a') { echo 'Installer verified'; } else { echo 'Installer corrupt'; unlink('composer-setup.php'); } echo PHP_EOL;"
        php composer-setup.php
        php -r "unlink('composer-setup.php');"
        sudo mv -v composer.phar /usr/local/bin/composer
        sudo chown -v root:root /usr/local/bin/composer
        sudo composer self-update
        popd
    fi

    notice "NodeJS Version ~12 wird als Snap installiert."
    cont_skip_abort
    if [[ $? -eq 0 ]]; then
        sudo snap install node --classic --channel=12
    fi
else
    warn "Es scheint kein LAMP-Server installiert zu sein. Fügen Sie folgende Pakete zu DESIRED_APT in settings hinzu:"
    warn "  apache2 mariadb-server php libapache2-mod-php"
    warn "und führen Sie das Setup dann erneut aus, um den LAMP-Server richtig zu konfigurieren."
fi

## Tastaturkürzel
notice "Das Tastaturkürzel Strg + Alt + C für den Taschenrechner wird eingerichtet."
cont_skip_abort
if [[ $? -eq 0 ]]; then
    gsettings set "org.gnome.settings-daemon.plugins.media-keys" "calculator" "['<Primary><Alt>c']"
fi

## Bildschirmhintergrund
notice "Der Bildschirmhintergrund wird konfiguriert."
cont_skip_abort
if [[ $? -eq 0 ]]; then
    gsettings set "org.gnome.desktop.background" "picture-options" "'zoom'"
    gsettings set "org.gnome.desktop.background" "picture-uri" "'file:///usr/share/backgrounds/hardy_wallpaper_uhd.png'"
    gsettings set "org.gnome.desktop.background" "primary-color" "'#000000'"
    gsettings set "org.gnome.desktop.background" "secondary-color" "'#000000'"
fi

## Bildschirmabschaltung
notice "Die Bildschirmabschaltung bei Untätigkeit wird auf 15 Minuten eingestellt."
cont_skip_abort
if [[ $? -eq 0 ]]; then
    gsettings set "org.gnome.desktop.session" "idle-delay" 900
fi

## Dash-To-Dock
notice "Die Größe der Icons im Dock wird nun auf 24 Pixel reduziert."
cont_skip_abort
if [[ $? -eq 0 ]]; then
    gsettings set "org.gnome.shell.extensions.dash-to-dock" "dash-max-icon-size" 24
fi

## GNOME Terminal
notice "Die Standardgröße eines Terminalfensters wird nun auf 125x40 Zeilen gesetzt."
cont_skip_abort
if [[ $? -eq 0 ]]; then
    profile=$(gsettings get org.gnome.Terminal.ProfilesList default)
    profile=${profile:1:-1}
    gsettings set "org.gnome.Terminal.Legacy.Profile:/org/gnome/terminal/legacy/profiles:/:$profile/" default-size-columns 125
    gsettings set "org.gnome.Terminal.Legacy.Profile:/org/gnome/terminal/legacy/profiles:/:$profile/" default-size-rows 40
fi

notice "Die Taste F10 für den Menüaufruf in Terminalfenstern wird deaktiviert."
cont_skip_abort
if [[ $? -eq 0 ]]; then
    gsettings set "org.gnome.Terminal.Legacy.Settings" "menu-accelerator-enabled" false
fi

## Essentials-Backup wiederherstellen
notice "Das Archiv essentials.tar.gz.gpg wird in $HOME entpackt."
cont_skip_abort
if [[ $? -eq 0 ]]; then
    dir=$(pwd)
    pushd $HOME
    gpg --no-options --decrypt $dir/essentials.tar.gz.gpg | tar xzv
    gpg --import-ownertrust ownertrust.txt
    rm ownertrust.txt
    popd
fi

## SSH-Key erzeugen
notice "Es wird ein SSH-Schlüssel für den Benutzer $USER erzeugt."
cont_skip_abort
if [[ $? -eq 0 ]]; then
    ssh-keygen
    warn "Der SSH-Schlüssel sollte nun auf alle anderen Rechner mittels ssh-copy-id kopiert werden."
fi

## Verzeichnisse in $HOME anlegen
notice "Die folgenden Verzeichnisse werden in $HOME angelegt:"
echo $DESIRED_DIRS
cont_skip_abort
if [[ $? -eq 0 ]]; then
    pushd $HOME
    for d in $DESIRED_DIRS; do
        mkdir -v $d
    done
    popd
fi

## Samba / Shares
if [[ -e /etc/samba/smb.conf ]]; then
    notice "Es wird ein SMB-Passwort für den Benutzer $USER vergeben."
    cont_skip_abort
    if [[ $? -eq 0 ]]; then
        sudo smbpasswd -a $USER
    fi

    notice "Samba wird für die Verwendung der Arbeitsgruppe $WORKGROUP konfiguriert."
    cont_skip_abort
    if [[ $? -eq 0 ]]; then
        sudo cp -v /etc/samba/smb.conf{,.SKP}
        sudo sed -i "s/WORKGROUP/$WORKGROUP/" /etc/samba/smb.conf
    fi

    notice "Die folgenden User-Shares werden angelegt:"
    notice "  - ${USER}_docs   -> $HOME/Dokumente"
    notice "  - ${USER}_music  -> $HOME/Musik"
    notice "  - ${USER}_public -> $HOME/Öffentlich"
    notice "  - ${USER}_videos -> $HOME/Videos"
    cont_skip_abort
    if [[ $? -eq 0 ]]; then
        domainsid=$(sudo net getlocalsid | cut -d':' -f2 | sed "s/ //g")
        usersid="$domainsid-$UID"
        (sudo cat <<EOF
#VERSION 2
path=/home/eric/Dokumente
comment=
usershare_acl=S-1-1-0:R,${usersid}:F
guest_ok=n
sharename=eric_docs
EOF
        )>/var/lib/samba/usershares/eric_docs
        (sudo cat <<EOF
#VERSION 2
path=/home/eric/Musik
comment=
usershare_acl=S-1-1-0:R,${usersid}:F
guest_ok=n
sharename=eric_music
EOF
        )>/var/lib/samba/usershares/eric_music
        (sudo cat <<EOF
#VERSION 2
path=/home/eric/Öffentlich
comment=
usershare_acl=S-1-1-0:F
guest_ok=n
sharename=eric_public
EOF
        )>/var/lib/samba/usershares/eric_public
        (sudo cat <<EOF
#VERSION 2
path=/home/eric/Videos
comment=
usershare_acl=S-1-1-0:R,${usersid}:F
guest_ok=n
sharename=eric_videos
EOF
        )>/var/lib/samba/usershares/eric_videos
    fi
else
    warn "Samba ist nicht installiert. Wenn Sie den Teil dieses Programms, mit dem Samba konfiguriert wird,"
    warn "ausführen möchten, fügen Sie samba zur Variable DESIRED_APT in settings hinzu und führen Sie das"
    warn "Setup-Programm erneut aus."
fi

## Borg Backup
if [[ -x /usr/bin/borg ]]; then
    notice "Es wird ein Cronjob angelegt, um täglich ein Backup für $USER auszuführen."
    cont_skip_abort
    if [[ $? -eq 0 ]]; then
        notice "Soll das Backup lokal oder per SSH erstellt werden?"
        select target in "lokal" "SSH"; do
            case $target in
            "lokal")
                targeturi="/EXTERN/Dasi/$(hostname)/$USER"
                break
                ;;
            "SSH")
                targeturi="$USER@aeneas:/EXTERN/Dasi/$(hostname)/$USER"
                break
                ;;
            *)
                warn "Ungültige Auswahl."
                ;;
            esac
        done
        notice "Das Backup-Ziel ist $targeturi"
        notice "Bitte wählen Sie eine Uhrzeit für das Backup:"
        select clocktime in "17" "18" "19" "20" "21" "22"; do
            cronline="0 $clocktime * * * test -x $HOME/bin/sichern.sh && $HOME/bin/sichern.sh >$HOME/bin/sichern.sh.log 2>&1"
            break
        done
        notice "Der Eintrag in der Crontab wird folgendermaßen aussehen:"
        echo "$cronline"
        (crontab -l 2>/dev/null; echo "$cronline") | crontab -
        notice "Der Cronjob wurde erfolgreich angelegt."
        (cat <<EOF
#!/bin/sh
# Dieses Skript kann interaktiv aufgerufen werden, aber es ist auch
# in der Crontab des Nutzers installiert (s. crontab -l). Es sichert
# das Nutzerverzeichnis und das persönliche FTP-Verzeichnis mittels
# borg nach $targeturi.
#
# 7 tägliche, 4 wöchentliche und 6 monatliche Backups werden aufgehoben.

REPOSITORY="$targeturi"

borg create -v --stats                     \\
     \$REPOSITORY::backup-\`date +%Y-%m-%d\`  \\
     /home/\$LOGNAME                        \\
     --exclude /home/\$LOGNAME/.cache       \\
     --exclude /home/\$LOGNAME/Temp

borg prune -v \$REPOSITORY --prefix backup- \\
     --keep-daily=7 --keep-weekly=4 --keep-monthly=6
EOF
        ) >$HOME/bin/sichern.sh
        chmod +x $HOME/bin/sichern.sh
        notice "Das Backup-Skript für diesen Benutzer wurde automatisch erzeugt."
        if [[ ! -e "$targeturi" ]]; then
            warn "Das Backup-Ziel scheint nicht zu existieren. Wenn gewünscht, kann dort ein Borg-Repository erzeugt werden."
            cont_skip_abort
            if [[ $? -eq 0 ]]; then
                notice "Wenn Sie aufgefordert werden, eine Passphrase einzugeben, lassen Sie das Feld bitte leer."
                notice "Andernfalls wird der Backup-Cronjob nicht funktionieren."
                borg init --encryption=keyfile --make-parent-dirs $targeturi
            fi
        fi
    fi
    ## Root-Backup
    notice "Es wird ein Cronjob angelegt, um täglich ein Backup wichtiger Systemdateien für root auszuführen."
    cont_skip_abort
    if [[ $? -eq 0 ]]; then
        notice "Soll das Backup lokal oder per SSH erstellt werden?"
        select target in "lokal" "SSH"; do
            case $target in
            "lokal")
                targeturi="/EXTERN/Dasi/$(hostname)/root"
                break
                ;;
            "SSH")
                targeturi="root@aeneas:/EXTERN/Dasi/$(hostname)/root"
                break
                ;;
            *)
                warn "Ungültige Auswahl."
                ;;
            esac
        done
        notice "Das Backup-Ziel ist $targeturi"
        notice "Bitte wählen Sie eine Uhrzeit für das Backup:"
        select clocktime in "17" "18" "19" "20" "21" "22"; do
            cronline="0 $clocktime * * * test -x /root/bin/sichern.sh && /root/bin/sichern.sh >/root/bin/sichern.sh.log 2>&1"
            break
        done
        notice "Der Eintrag in der Crontab wird folgendermaßen aussehen:"
        echo "$cronline"
        (sudo crontab -u root -l 2>/dev/null; echo "$cronline") | sudo crontab -u root -
        notice "Der Cronjob wurde erfolgreich angelegt."
        sudo mkdir -p /root/bin
        (cat <<EOF
#!/bin/sh
# Dieses Skript kann interaktiv aufgerufen werden, aber es ist auch
# in der Crontab des Nutzers installiert (s. crontab -l). Es sichert
# das Nutzerverzeichnis mittels borg auf die externe Festplatte nach
# $targeturi.
#
# 7 tägliche, 4 wöchentliche und 6 monatliche Backups werden aufgehoben.

REPOSITORY="$targeturi"

borg create -v --stats                     \\
     \$REPOSITORY::backup-\`date +%Y-%m-%d\`  \\
     /root                                 \\
     /etc                                  \\
     /var/www                              \\
     /var/lib/mysql

borg prune -v \$REPOSITORY --prefix backup- \\
     --keep-daily=7 --keep-weekly=4 --keep-monthly=6
EOF
        ) >$HOME/bin/sichern.sh
        chmod +x $HOME/bin/sichern.sh
        notice "Das Backup-Skript für root wurde automatisch erzeugt."
        if [[ ! -e "$targeturi" ]]; then
            warn "Das Backup-Ziel scheint nicht zu existieren. Wenn gewünscht, kann dort ein Borg-Repository erzeugt werden."
            cont_skip_abort
            if [[ $? -eq 0 ]]; then
                notice "Wenn Sie aufgefordert werden, eine Passphrase einzugeben, lassen Sie das Feld bitte leer."
                notice "Andernfalls wird der Backup-Cronjob nicht funktionieren."
                sudo -H borg init --encryption=keyfile --make-parent-dirs $targeturi
            fi
        fi
    fi
else
    warn "Borg Backup ist nicht installiert. Um das Backup mit diesem Programm zu konfigurieren, fügen Sie borgbackup"
    warn "zu DESIRED_APT in settings hinzu und führen Sie das Setup erneut aus."
fi

## Root-Passwort
notice "Es wird ein neues Passwort für den Benutzer root vergeben."
cont_skip_abort
if [[ $? -eq 0 ]]; then
    sudo passwd root
fi

## SSH-Schlüssel für root
notice "Es wird ein SSH-Schlüssel für den Benutzer root erzeugt."
cont_skip_abort
if [[ $? -eq 0 ]]; then
    sudo -H ssh-keygen
    if [[ "$(hostname)" != "aeneas" ]]; then
        warn "Der SSH-Schlüssel sollte zu root@aeneas kopiert werden, damit das Backup funktioniert."
        warn "Wenn Sie wünschen, kann dies sofort erledigt werden."
        cont_skip_abort
        if [[ $? -eq 0 ]]; then
            sudo -H ssh-copy-id root@aeneas
        fi
    fi
fi

## SSH-Server
if [[ -e /etc/ssh/sshd_config ]]; then
    notice "Der SSH-Server wird so eingestellt, dass er die Anmeldung von root per SSH-Schlüssel erlaubt."
    cont_skip_abort
    if [[ $? -eq 0 ]]; then
        sudo sed -i 's/#PermitRootLogin prohibit-password/PermitRootLogin prohibit-password/' /etc/ssh/sshd_config
    fi
    notice "Die Anmeldung am SSH-Server mit Passwörtern wird deaktiviert."
    cont_skip_abort
    if [[ $? -eq 0 ]]; then
        sudo sed -i 's/#PasswordAuthentication yes/PasswordAuthentication no' /etc/ssh/sshd_config
    fi
else
    warn "Es scheint kein SSH-Server installiert zu sein. Fügen Sie openssh-server zu DESIRED_APT in settings hinzu"
    warn "und führen Sie das Setup erneut aus, um den SSH-Server richtig zu konfigurieren."
fi

## Oh My Zsh
notice "Oh My Zsh wird geklont und installiert."
cont_skip_abort
if [[ $? -eq 0 ]]; then
    pushd $HOME
    sh -c "$(wget -O- https://raw.githubusercontent.com/ohmyzsh/ohmyzsh/master/tools/install.sh)"
    rm .zshrc
    popd
fi

## Dotfiles
notice "Persönliche Dotfiles werden geklont und installiert."
cont_skip_abort
if [[ $? -eq 0 ]]; then
    pushd $HOME/Code
    git clone https://github.com/pille1842/dotfiles
    pushd dotfiles
    ./install.sh
    popd
    popd
fi

success "Setup wurde erfolgreich abgeschlossen. Ein Logout wird dringend empfohlen."
